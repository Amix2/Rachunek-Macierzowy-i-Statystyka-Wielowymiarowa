install.packages("ggplot2")
install.packages("Rcpp")
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("Rcpp", dependencies = TRUE)
install.packages("ggplot2")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
read.csv("data.csv")
Data = read.csv("data.csv")
Data = read.csv("data.csv")
Data
Data = read.csv("data.csv")
Data
fit <- lm(popularity ~ duration_ms+danceability+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
fit
class(fit)
is.list(fit)
names(fit)
summary(fit)
fit_small <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small)
fit_small <- lm(popularity ~ duration_ms+instrumentalness, data = Data)
summary(fit_small)
fit_small <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small)
fit_small_3 <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small_3)
fit_small_3 <- lm(popularity ~ duration_ms+loudness+acousticness+instrumentalness, data = Data)
summary(fit_small_3)
fit_small_3 <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small_3)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(ellipse)
plot(ellipse(fit_la, which = -1), type = "l")
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(MASS)
install.packages("ISLR", dependencies = TRUE)
names(Boston)
dim(Boston)
?Boston
head(Boston)
fit_simple <- lm(Boston$medv ~ Boston$lstat)
fit_simple <- lm(medv ~ lstat, data = Boston)
attach(Boston)
fit_simple <- lm(medv ~ lstat)
fit_simple
class(fit_simple)
is.list(fit_simple)
names(fit_simple)
fit_simple
class(fit_simple)
is.list(fit_simple)
names(fit_simple)
fit_simple$coefficients
coef(fit_simple)
?summary.lm
summary(fit_simple)
summaryList <- summary(fit_simple)
summaryList$sigma
summaryList$r.squared
summaryList$fstatistic
confint(fit_simple)
predict(fit_simple, data.frame(lstat = c(5, 10, 15)), interval = "confidence")
predict(fit_simple, data.frame(lstat = c(5, 10, 15)), interval = "prediction")
plot(Boston$lstat, Boston$medv)
abline(fit_simple)
# Można poprzedzić instrukcją: par(mfrow = c(2, 2))
plot(fit_simple)
plot(predict(fit_simple), residuals(fit_simple))
plot(predict(fit_simple), rstudent(fit_simple))
library(ellipse)
plot(ellipse(fit_la, which = -1), type = "l")
fit_small_3 <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small_3)
coef(fit_small_3)
fit_small_3 <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small_3)
Data = read.csv("data.csv")
Data
fit <- lm(popularity ~ duration_ms+danceability+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
fit_small_3 <- lm(popularity ~ duration_ms+loudness+instrumentalness, data = Data)
summary(fit_small_3)
fit <- lm(popularity ~ duration_ms+danceability+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
summary(fit)
fit_small_2 <- lm(popularity ~ duration_ms+instrumentalness, data = Data)
summary(fit_small_2)
fit_small_2 <- lm(popularity ~ duration_ms+instrumentalness, data = Data)
summary(fit_small_2)
plot(Data$popularity, Data$instrumentalness )
abline(fit_small_2)
plot(Data$popularity, Data$duration_ms        )
abline(fit_small_2)
fit_small_2 <- lm(popularity ~ instrumentalness, data = Data)
summary(fit_small_2)
plot(Data$popularity, Data$instrumentalness        )
abline(fit_small_2)
fit_small_2 <- lm(popularity ~ duration_ms+instrumentalness, data = Data)
summary(fit_small_2)
plot(Data$popularity, Data$instrumentalness)
fit_small_2 <- lm(popularity ~ instrumentalness, data = Data)
summary(fit_small_2)
plot(Data$instrumentalness, Data$popularity)
abline(fit_simple)
fitQ <- lm(duration_ms~., data = Data)
summary(fitQ)
fitQ <- lm(year~popularity+duration_ms+danceability+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
summary(fitQ)
fitQ <- lm(duration_ms~year+popularity+danceability+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
summary(fitQ)
fitQ <- lm(danceability~duration_ms+year+popularity+energy+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
summary(fitQ)
fitQ <- lm(energy~danceability+duration_ms+year+popularity+loudness+speechiness+acousticness+instrumentalness+liveness+valence+tempo, data = Data)
summary(fitQ)
fitQ <- lm(valence~energy+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness+instrumentalness+liveness+tempo, data = Data)
summary(fitQ)
fitQ <- lm(tempo~valence+energy+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness+instrumentalness+liveness+tempo, data = Data)
summary(fitQ)
fitQ <- lm(tempo~valence+energy+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness+instrumentalness+liveness, data = Data)
summary(fitQ)
fitQ <- lm(liveness~tempo+valence+energy+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness+instrumentalness, data = Data)
summary(fitQ)
fitQ <- lm(instrumentalness~liveness+tempo+valence+energy+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness, data = Data)
summary(fitQ)
fitQ <- lm(energy~instrumentalness+liveness+tempo+valence+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness, data = Data)
summary(fitQ)
fit <- lm(energy~instrumentalness+liveness+tempo+valence+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness, data = Data)
summary(fit)
plot(Data$year, Data$energy)
plot(Data$year, Data$instrumentalness)
plot(Data$year, Data$valence)
Data = read.csv("data.csv")
Data
fit <- lm(energy~instrumentalness+liveness+tempo+valence+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness, data = Data)
summary(fit)
Data = read.csv("data.csv")
Data
fit <- lm(energy~instrumentalness+liveness+tempo+valence+danceability+duration_ms+year+popularity+loudness+speechiness+acousticness, data = Data)
summary(fit)
setwd("D:/AGH/Rachunek Macierzowy i Statystyka Wielowymiarowa/R")
View(Data)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(ISLR)
library(MASS)
library(tree)
library(randomForest)
library(gbm)
Data = read.csv("data.csv")
Data <- na.omit(Data)
Data = Data[,3:17]
Data$explicit <- as.integer(Data$explicit == "True")
DataPolularH <- within(Carseats, High <- factor(ifelse(popularity > 50, "Yes", "No")))
DataPolularH <- within(Carseats, High <- factor(ifelse(Data$popularity > 50, "Yes", "No")))
View(DataPolularH)
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(MASS)
library(ISLR)
library(class)
library(leaps)
Data = read.csv("data.csv")
Data <- na.omit(Data)
Data = Data[,3:17]
Data$explicit <- as.integer(Data$explicit == "True")
songs_bs <- regsubsets(loudness ~ ., data = Data, really.big = TRUE, nvmax=15)
songs_bs_sum <- summary(songs_bs)
songs_bs_sum
songs_bs_sum$cp
bic_min <- which.min(songs_bs_sum$bic)
bic_min
songs_bs_sum$bic[bic_min]
knitr::opts_chunk$set(echo = TRUE, eval = FALSE)
library(ISLR)
library(MASS)
library(tree)
library(randomForest)
library(gbm)
High <- factor(ifelse(Carseats$Sales <= 8, "No", "Yes"))
CarseatsH <- data.frame(Carseats, High)
View(CarseatsH)
View(CarseatsH)
View(DataPolularH)
View(DataPolularH)
View(DataPolularH)
View(DataPolularH)
DataPolularH <- within(Carseats, IsPopular <- factor(ifelse(Data$popularity > 50, "Yes", "No")))
View(DataPolularH)
View(Data)
Data = read.csv("data.csv")
Data <- na.omit(Data)
Data = Data[,3:17]
Data$explicit <- as.integer(Data$explicit == "True")
#DataPolularH <- within(Carseats, IsPopular <- factor(ifelse(Data$popularity > 50, "Yes", "No")))
IsPopular <- factor(ifelse(Data$popularity > 50, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
IsPopular <- factor(ifelse(Data$popularity > 50, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
View(DataPolularH)
View(DataPolularH)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
sales_high_tree <- tree(High ~ . - Sales, data = CarseatsH)
summary(sales_high_tree)
plot(is_popular_tree)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
plot(is_popular_tree)
IsPopular <- factor(ifelse(Data$popularity > 80, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
plot(is_popular_tree)
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
is_popular_tree
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
set.seed(1)
n <- nrow(CarseatsH)
train <- sample(n, n / 2)
test <- -train
sales_high_tree <- tree(High ~ . - Sales, data = CarseatsH, subset = train)
tree_class <- predict(sales_high_tree, newdata = CarseatsH[test,], type = "class")
table(tree_class, CarseatsH$High[test])
mean(tree_class != CarseatsH$High[test])
set.seed(1)
n <- nrow(DataPolularH)
train <- sample(n, n / 2)
test <- -train
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
tree_class <- predict(sales_high_tree, newdata = DataPolularH[test,], type = "class")
set.seed(1)
n <- nrow(DataPolularH)
train <- sample(n, n / 2)
test <- -train
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
tree_class <- predict(is_popular_tree, newdata = DataPolularH[test,], type = "class")
table(tree_class, DataPolularH$IsPopular[test])
mean(tree_class != DataPolularH$IsPopular[test])
IsPopular <- factor(ifelse(Data$popularity > 60, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
IsPopular <- factor(ifelse(Data$popularity > 70, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
IsPopular <- factor(ifelse(Data$popularity > 750, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
IsPopular <- factor(ifelse(Data$popularity > 75, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
is_popular_tree
set.seed(1)
n <- nrow(DataPolularH)
train <- sample(n, n / 2)
test <- -train
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
tree_class <- predict(is_popular_tree, newdata = DataPolularH[test,], type = "class")
table(tree_class, DataPolularH$IsPopular[test])
mean(tree_class != DataPolularH$IsPopular[test])
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
set.seed(1)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
set.seed(1)
n <- nrow(CarseatsH)
train <- sample(n, n / 2)
test <- -train
sales_high_tree <- tree(High ~ . - Sales, data = CarseatsH, subset = train)
tree_class <- predict(sales_high_tree, newdata = CarseatsH[test,], type = "class")
table(tree_class, CarseatsH$High[test])
mean(tree_class != CarseatsH$High[test])
plot(sales_high_tree)
text(sales_high_tree, pretty = 0)
set.seed(1)
sales_high_cv <- cv.tree(sales_high_tree, FUN = prune.misclass)
sales_high_cv
plot(sales_high_cv$size, sales_high_cv$dev, type = "b")
IsPopular <- factor(ifelse(Data$popularity > 80, "Yes", "No"))
DataPolularH <- data.frame(Data, IsPopular)
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
summary(is_popular_tree)
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
is_popular_tree
set.seed(1)
n <- nrow(DataPolularH)
train <- sample(n, n / 2)
test <- -train
is_popular_tree <- tree(IsPopular ~ . - popularity, data = DataPolularH)
tree_class <- predict(is_popular_tree, newdata = DataPolularH[test,], type = "class")
table(tree_class, DataPolularH$IsPopular[test])
mean(tree_class != DataPolularH$IsPopular[test])
plot(is_popular_tree)
text(is_popular_tree, pretty = 0)
set.seed(1)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
size_opt <- sales_high_cv$size[which.min(sales_high_cv$dev)]
sales_high_pruned <- prune.misclass(sales_high_tree, best = size_opt)
plot(sales_high_pruned)
text(sales_high_pruned, pretty = 0)
size_opt <- sales_high_cv$size[which.min(is_pop_cv$dev)]
is_pop_pruned <- prune.misclass(is_popular_tree, best = size_opt)
plot(is_pop_pruned)
text(is_pop_pruned, pretty = 0)
set.seed(2)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
set.seed(3)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
set.seed(4)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
set.seed(45
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
set.seed(1)
is_pop_cv <- cv.tree(is_popular_tree, FUN = prune.misclass)
is_pop_cv
plot(is_pop_cv$size, is_popular_tree$dev, type = "b")
size_opt <- sales_high_cv$size[which.min(is_pop_cv$dev)]
is_pop_pruned <- prune.misclass(is_popular_tree, best = size_opt)
plot(is_pop_pruned)
text(is_pop_pruned, pretty = 0)
